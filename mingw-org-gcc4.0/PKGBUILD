# Maintainer:  Tim Stahlhut <stahta01@gmail.com>
# Contributor: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Alexey Borzenkov <snaury@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>
# Contributor: Kirill MÃ¼ller <krlmlr@mailbox.org>

# MINGW_ARCH="mingw32" makepkg-mingw -Lf

PACKAGE_MINGW_ORG_PREFIX="mingw-org-$MSYSTEM_CARCH"
_target="i686-pc-mingw32"
_install_prefix="/mingw-org"

_enable_ada=no
_enable_fortran=no
#_threads="win32"
_realname=gcc
pkgbase=mingw-org-${_realname}4.0
pkgname=("${PACKAGE_MINGW_ORG_PREFIX}-${_realname}")
pkgver=4.0.4
_sourcedir=${_realname}-${pkgver}
pkgrel=1
pkgdesc="GCC for the mingw-org"
arch=('any')
mingw_arch=('mingw32')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${PACKAGE_MINGW_ORG_PREFIX}-toolchain")
makedepends=("${PACKAGE_MINGW_ORG_PREFIX}-${_realname}"
             $([[ "$_enable_ada" == "yes" ]] && echo "${PACKAGE_MINGW_ORG_PREFIX}-${_realname}-ada")
             "${PACKAGE_MINGW_ORG_PREFIX}-binutils"
             "${PACKAGE_MINGW_ORG_PREFIX}-wsl"
             "${PACKAGE_MINGW_ORG_PREFIX}-gmp"
             "${PACKAGE_MINGW_ORG_PREFIX}-libiconv"
             "${PACKAGE_MINGW_ORG_PREFIX}-libintl"
             "${PACKAGE_MINGW_ORG_PREFIX}-mpc"
             "${PACKAGE_MINGW_ORG_PREFIX}-mpfr"
             "${PACKAGE_MINGW_ORG_PREFIX}-windows-default-manifest"
             "${PACKAGE_MINGW_ORG_PREFIX}-zlib"
             "${MINGW_PACKAGE_PREFIX}-autotools")
options=('staticlibs' '!emptydirs' '!strip') # '!strip' 'debug')
#GMP_VERSION=4.3.2
#MPFR_VERSION=2.4.2
#noextract=("mpfr-$MPFR_VERSION.tar.bz2"
#           "gmp-$GMP_VERSION.tar.bz2")
source=("https://ftp.gnu.org/gnu/gcc/${_realname}-${pkgver%%+*}/${_realname}-${pkgver}.tar.bz2"
#        "ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-${MPFR_VERSION}.tar.bz2"
#        "ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-${GMP_VERSION}.tar.bz2"
        140-gcc-4.0-fix-for-windows-not-minding-non-existent-parent-dirs.patch
        150-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch
        701-libiberty-define-for-headers-that-libiberty-cannot-f.patch
        901-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch
        902-gcc-4.0-xm-mingw32.h-__USE_MINGW_ANSI_STDIO.patch)
sha256sums=('f3fde051c96d2fc084f6f4d6114ce4c1a079fcd1247d947d50a3d1641acafc47'
#            'c7e75a08a8d49d2082e4caee1591a05d11b9d5627514e678f02d66a124bcf2ba'
#            '936162c0312886c21581002b79932829aa048cfaf9937c6265aeaa14f1cd1775'
            '74e3a5690f33b71399731a40b1a95fa1ec7275f156a55ee14e7a1eac1711129e'
            '44d7f21e073c292e74ee7ee9858e31e993a4816af0a2ee09e0bb2acb557d2d33'
            '530d50f66f7b36d33b6fa2a07718add7c617a6a28f908a1245a130491d81242d'
            'e0442e147448bd725d39bb8ce82b8e939ccc5b33b228388b43138022f1452b4c'
            '479ed5348b5946a0c1cf44d2ad5420fbd0a9b5266f11b7d4da222da1f0ba37d9')

# =========================================== #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

_extract_to_gcc_folder() {
    local tarfile="$1"
    local subfolder="$(echo "$tarfile" | sed 's/-.*$//')"
    if [ ! -d  "$_sourcedir/$subfolder" ]; then
        echo "Extracting ${tarfile} to $_sourcedir/$subfolder"
        mkdir -p "$_sourcedir/$subfolder"
        tar -x --strip-components=1 -f "$tarfile" -C "$_sourcedir/$subfolder"
    else
        echo "Folder $_sourcedir/$subfolder already exists"
    fi
}
# =========================================== #

prepare() {
  cd ${srcdir}

#  _extract_to_gcc_folder          mpfr-${MPFR_VERSION}.tar.bz2
#  _extract_to_gcc_folder          gmp-${GMP_VERSION}.tar.bz2

  cd ${srcdir}/${_sourcedir}

  # mingw.org needed or created patch files
  apply_patch_with_msg \
    701-libiberty-define-for-headers-that-libiberty-cannot-f.patch

  # Most likely run-time patch files
  apply_patch_with_msg \
    140-gcc-4.0-fix-for-windows-not-minding-non-existent-parent-dirs.patch \
    150-gcc-4.0-windows-lrealpath-no-force-lowercase-nor-backslash.patch

  # Most likely build-time patch files
  apply_patch_with_msg \
    901-gcc-4.0-cfns-fix-mismatch-in-gnu_inline-attributes.patch \
    902-gcc-4.0-xm-mingw32.h-__USE_MINGW_ANSI_STDIO.patch

  # do not expect ${prefix}/mingw symlink
  sed -i 's/${prefix}\/mingw\//${prefix}\//g' configure

  # change hardcoded /mingw prefix to the real prefix
  local MINGW_NATIVE_PREFIX=$(cygpath -am ${_install_prefix})
  sed -i "s#\\/mingw\\/#${MINGW_NATIVE_PREFIX//\//\\/}\\/#g" gcc/config/i386/mingw32.h

  # FIX "The directory that should contain system headers does not exist: /mingw/include"
  sed -i "s|/mingw/include|$_install_prefix/include|g" gcc/config/i386/t-mingw32
}

build() {
  [[ -d ${srcdir}/build-${MINGW_CHOST} ]] && rm -rf ${srcdir}/build-${MINGW_CHOST}
  mkdir -p ${srcdir}/build-${MINGW_CHOST} && cd ${srcdir}/build-${MINGW_CHOST}

  export PATH=${_install_prefix}/bin:$PATH
  echo "PATH := $PATH"

  export LDFLAGS="-pipe"
  export CFLAGS="-pipe"
  export CXXFLAGS="-pipe"

  # Remove "-D__USE_MINGW_ANSI_STDIO=1" from CPPFLAGS
  CPPFLAGS=${CPPFLAGS/-D__USE_MINGW_ANSI_STDIO=1}
  echo "CPPFLAGS := $CPPFLAGS"

  declare -a extra_config

  case "${CARCH}" in
    i686)
      extra_config+=("--enable-sjlj-exceptions")
      extra_config+=("--enable-large-address-aware")
      local _arch=i686
    ;;

    x86_64)
      local _arch=x86-64
    ;;
  esac

  local _languages="c"
  if [ "$_enable_ada" == "yes" ]; then
    _languages+=",ada"
  fi
  if [ "$_enable_fortran" == "yes" ]; then
    _languages+=",fortran"
  fi

  # so libgomp DLL gets built despide static libdl
  export lt_cv_deplibs_check_method='pass_all'

  LDFLAGS+=" -Wl,--disable-dynamicbase"

# --enable-threads=${_threads} \

  CPPFLAGS+=" -DLIBGCC2_HAS_XF_MODE=0" \
  CFLAGS+=" -I${_install_prefix}/include" \
  CC="${_target}-gcc" \
  ../${_sourcedir}/configure \
    --prefix=${_install_prefix} \
    --with-local-prefix=${_install_prefix}/local \
    --build=${_target} \
    --host=${_target} \
    --libexecdir=${_install_prefix}/lib \
    --disable-bootstrap \
    --enable-checking=release \
    --disable-build-format-warnings \
    --with-arch=${_arch} \
    --enable-languages=${_languages} \
    --enable-shared --enable-static \
    --disable-libatomic \
    --disable-threads \
    --disable-graphite \
    --enable-fully-dynamic-string \
    --disable-libstdcxx \
    --disable-libstdcxx-pch \
    ${extra_config} \
    --disable-libgomp \
    --disable-libvtv \
    --disable-multilib \
    --disable-rpath \
    --disable-win32-registry \
    --enable-nls \
    --disable-werror \
    --disable-symvers \
    --with-system-zlib \
    --without-libiconv \
    --without-libintl \
    --with-pkgversion="Rev${pkgrel}, Built by Tims mingw-org project" \
    --with-bugurl="https://github.com/stahta01/mingw-org-packages/issues" \
    --with-boot-ldflags="${LDFLAGS} -static-libgcc" \
    --with-gnu-as --with-gnu-ld

  make -j1 V=1 all

  rm -rf ${srcdir}${_install_prefix}

  make -j1 DESTDIR=${srcdir} install
}

package() {
  pkgdesc="GNU Compiler Collection for mingw-org"
  depends=("${PACKAGE_MINGW_ORG_PREFIX}-binutils"
           "${PACKAGE_MINGW_ORG_PREFIX}-wsl"
           "${PACKAGE_MINGW_ORG_PREFIX}-windows-default-manifest"
           "${PACKAGE_MINGW_ORG_PREFIX}-zlib"
           )
  provides=("${PACKAGE_MINGW_ORG_PREFIX}-cc")
  conflicts=("${PACKAGE_MINGW_ORG_PREFIX}-cc")

  mkdir -p ${pkgdir}${_install_prefix}/{bin,include,lib,share}

  cd ${srcdir}${_install_prefix}
  cp bin/cpp.exe                                        ${pkgdir}${_install_prefix}/bin/
  cp bin/gcc.exe                                        ${pkgdir}${_install_prefix}/bin/
  cp bin/gcc.exe                                        ${pkgdir}${_install_prefix}/bin/cc.exe
  cp bin/gcov.exe                                       ${pkgdir}${_install_prefix}/bin/
  cp bin/${_target}-gcc-${pkgver%%+*}.exe               ${pkgdir}${_install_prefix}/bin/
  cp bin/${_target}-gcc.exe                             ${pkgdir}${_install_prefix}/bin/
  mkdir -p ${pkgdir}${_install_prefix}/lib/gcc/${_target}/${pkgver%%+*}/include
  cp lib/gcc/${_target}/${pkgver%%+*}/include/*.h        ${pkgdir}${_install_prefix}/lib/gcc/${_target}/${pkgver%%+*}/include/
  cp -r lib/gcc/${_target}/${pkgver%%+*}/install-tools   ${pkgdir}${_install_prefix}/lib/gcc/${_target}/${pkgver%%+*}/
  cp lib/gcc/${_target}/${pkgver%%+*}/cc1.exe            ${pkgdir}${_install_prefix}/lib/gcc/${_target}/${pkgver%%+*}/
  cp lib/gcc/${_target}/${pkgver%%+*}/libgcov*           ${pkgdir}${_install_prefix}/lib/gcc/${_target}/${pkgver%%+*}/
  cp lib/gcc/${_target}/${pkgver%%+*}/libgcc*            ${pkgdir}${_install_prefix}/lib/gcc/${_target}/${pkgver%%+*}/

  mkdir -p ${pkgdir}${_install_prefix}/share/{doc,info,locale,man}
  cp info/cpp.info*                                ${pkgdir}${_install_prefix}/share/info/
  cp info/cppinternals.info*                       ${pkgdir}${_install_prefix}/share/info/
  cp info/gcc.info*                                ${pkgdir}${_install_prefix}/share/info/
  cp info/gccinstall.info*                         ${pkgdir}${_install_prefix}/share/info/
  cp info/gccint.info*                             ${pkgdir}${_install_prefix}/share/info/

  mkdir -p ${pkgdir}${_install_prefix}/share/man/man1
  cp man/man1/cpp.1*                               ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man1/gcc.1*                               ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man1/gcov.1*                              ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man7/fsf-funding.7*                       ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man7/gfdl.7*                              ${pkgdir}${_install_prefix}/share/man/man1/
  cp man/man7/gpl.7*                               ${pkgdir}${_install_prefix}/share/man/man1/

  # License files
  mkdir -p "${pkgdir}${_install_prefix}/share/licenses/${_realname}"
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING"         "${pkgdir}${_install_prefix}/share/licenses/${_realname}/COPYING"
  install -Dm644 "${srcdir}/${_sourcedir}/COPYING.LIB"     "${pkgdir}${_install_prefix}/share/licenses/${_realname}/COPYING.LIB"
}
